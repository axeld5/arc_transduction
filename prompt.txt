You are given an Abstraction and Reasoning-style grid problem. Your job is to infer the transformation rule(s) from the provided training example(s) and apply them to the given test input to produce the exact expected output.

Follow these steps and constraints:

1) Understand the input structure:
- Each problem consists of:
  - One or more Training Examples: each shows an Input grid and its corresponding Output grid.      
  - One Test Case: shows only the Input grid; you must produce its Output.
- Grids are 2D arrays of digits 0–9. 0 is almost always background; other digits represent colors/objects.

2) Infer the transformation rule(s) from the training example(s):
- Compare each training Input to its Output and identify what changed:
  - Look for anchors/features: solid rows/columns of a single color, frames/borders, the largest contiguous object, repeated motifs, or directional relationships (above/below, left/right) to an anchor line or shape.
  - Typical operations include:
    - Recoloring specific cells within horizontal/vertical runs (often the leftmost/rightmost/topmost/bottommost cell of a run) depending on position relative to an anchor. Example: if there is a full row of a color, horizontal runs of another color above it may have their rightmost cell recolored to the row’s color, while similar runs below may have their leftmost cell recolored.
    - Removing “noise” colors/markers (e.g., a distinct secondary color such as 8 or 1) while preserving the primary structure (e.g., color 6 or 3) exactly as in the training Output.
    - Preserving or extending contiguous structures (4-neighborhood connectivity: up/down/left/right) and eliminating isolated or non-conforming cells.
    - Mirroring, translating, or projecting features along rows/columns relative to an anchor line or frame.
    - Summarizing structures to a 1D output when the training example indicates a non-grid result (e.g., a single column vector of numbers; match the training Output shape).
- Validate your inferred rule across all provided training examples (if more than one): it must consistently explain all Input→Output changes.

3) Apply the rule(s) to the Test Case input:
- Use only colors present in the problem’s palettes (from training inputs/outputs and the test input). Do not invent new colors. If a color is removed in training outputs (e.g., all 8s removed), do not reintroduce it.
- Be conservative: change only what the inferred rule requires; keep everything else unchanged.     
- Maintain connectivity interpretations using 4-neighborhood unless the training clearly indicates otherwise.

4) Output formatting (strict):
- Your final response must be ONLY the answer, with no explanations, headers, or extra lines.       
- If the expected result is a 2D grid:
  - Print each row on its own line.
  - Within a row, separate numbers by a single space.
  - No trailing spaces on any line. No blank lines before/after.
- If the expected result is a 1D vector (as indicated by training example outputs):
  - Print one number per line (no spaces).
  - The number of lines must match the training Output’s 1D length pattern for that task.
- Match the output dimensions exactly as implied by the training Output form for that specific task.

5) Quality checks before you answer:
- Ensure the output uses only digits seen in the problem’s palette (typically from inputs and training outputs).
- Ensure the output’s dimensions and shape (grid vs column vector) match what the training Output indicates for this task family.
- Verify spacing: single spaces between numbers on grid rows; no extra spaces or blank lines.       

Remember:
- Derive the rule from the training example(s) and apply it consistently.
- Do not include any reasoning or additional text in your answer—only the final formatted output. 