[project]
name = "arc-transduction"
version = "0.1.0"
description = "ARC (Abstraction and Reasoning Corpus) training and inference system"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "Axel Darmouni", email = "axeldarmouni@gmail.com" }
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.9"
dependencies = [
    # Core ML dependencies
    "torch>=2.0.0",
    "transformers>=4.30.0",
    "accelerate>=0.20.0",
    "datasets>=2.10.0",
    
    # Training dependencies
    "trl>=0.7.0",
    "trl[vllm]>=0.7.0",
    "peft>=0.6.0",
    "bitsandbytes>=0.39.0",
    "deepspeed>=0.9.0",
    "tensorboard>=2.10.0",
    "mpi4py>=3.1.0",
    
    # Utilities
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "tqdm>=4.64.0",
    "python-dotenv>=0.19.0",
    "huggingface-hub>=0.16.0",
    "ipykernel>=6.20.0",
    
    # Development
    "pytest>=7.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=4.0.0",
    "mypy>=0.950",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=4.0.0",
    "mypy>=0.950",
    "pre-commit>=2.20.0",
]
training = [
    "deepspeed>=0.9.0",
    "tensorboard>=2.10.0",
    "wandb>=0.13.0",
]
inference = [
    "flask>=2.2.0",
    "fastapi>=0.95.0",
    "uvicorn>=0.20.0",
]

[project.urls]
Homepage = "https://github.com/axel-darmouni/arc-transduction"
Repository = "https://github.com/axel-darmouni/arc-transduction"
Issues = "https://github.com/axel-darmouni/arc-transduction/issues"

[project.scripts]
arc-train-transduction = "transduction.training.sft:main"
arc-rl-transduction = "transduction.training.rl:main"
arc-train-induction = "induction.training.sft:main"
arc-rl-induction = "induction.training.rl:main"
arc-generate-data = "transduction.data_gen:main"
arc-evaluate = "transduction.eval:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["transduction", "induction", "dslearn_processes"]

[dependency-groups]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=4.0.0",
    "mypy>=0.950",
    "pre-commit>=2.20.0",
]

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["transduction", "induction", "dslearn_processes"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "transformers.*",
    "datasets.*",
    "trl.*",
    "peft.*",
    "accelerate.*",
    "bitsandbytes.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "-ra",
    "--cov=transduction",
    "--cov=induction",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.coverage.run]
source = ["transduction", "induction"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/old_code/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
